import express, { Application, Response } from 'express';
import 'dotenv/config';
import * as mongoose from 'mongoose';

import { config } from './config/config';
import {ErrorHandler} from "./errors/handler.error";
import Logger from "./libs/winston/logger";
import {BaseError} from "./errors/base.error";


const app: Application = express();
const errorHandler = new ErrorHandler(Logger());

const { port, dbUser, dbPassword, dbName } = config;

// Middleware –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ JSON
app.use(express.json());

console.log('Hello, TypeScript with Express!');

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (_, res: Response) => {
    res.send('Hello, TypeScript with Expres!');

});
Logger().info('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞');

mongoose
    .connect(
        `mongodb+srv://${dbUser}:${dbPassword}@mycluster.kb2zz.mongodb.net/${dbName}?retryWrites=true&w=majority`,
    )
    .then(() => {
        console.log('‚úÖ MongoDB connected successfully');
        app.listen(port, () => {
            console.log(`Server is running at http://localhost:${port} üöúüöúüöú`);
        });
    })
    .catch(error => {
        console.error('‚ùå MongoDB connection error:', error);
        process.exit(1);
    });

process.on('uncaughtException', async (error: Error) => {
    await errorHandler.handleError(error);
    if (!errorHandler.isTrustedError(error)) process.exit(1);
});

process.on('unhandledRejection', (reason: Error) => {
    throw reason;
});

throw new BaseError ('–¢–∞', '—Ç—É—Ç', "–º–µ—Ç–æ—Ç", 400, true);



